axis.ticks.y = element_blank())
max(decoy$score)
ggplot(data = plot,aes(x=score,y=pep, colour=group))+
geom_point(shape=21,size=4)+
scale_colour_manual(values = c("target" = "#009900", "decoy" = "#FF9900")) +
geom_text_repel(data = plot[plot$seq %in% peptidelist,],aes(label = seq),color = "black",
size = 3,segment.color = "black", show.legend = FALSE,vjust = -3 ,
force=20,point.padding = 0.5,arrow = arrow(length = unit(0.01, "npc"), type = "open", ends = "last"))+
theme_bw() +
theme(plot.title = element_text(size = rel(1.5)),
axis.title = element_text(size = rel(1.2)),
axis.text = element_text(size = rel(1.2)),
axis.title.y = element_text(angle = 0))+
theme(aspect.ratio=1)+
labs(x = 'score', y = "")+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
geom_vline(xintercept=c(max(decoy$score)),lty=3,col="black",lwd=0.5)
ggplot(data = plot,aes(x=score,y=pep, colour=group))+
geom_point(shape=21,size=4)+
scale_colour_manual(values = c("target" = "#009900", "decoy" = "#FF9900")) +
geom_text_repel(data = plot[plot$seq %in% peptidelist,],aes(label = seq),color = "black",
size = 3,segment.color = "black", show.legend = FALSE,vjust = -3 ,
force=20,point.padding = 0.5,arrow = arrow(length = unit(0.01, "npc"), type = "open", ends = "last"))+
theme_bw() +
theme(plot.title = element_text(size = rel(1.5)),
axis.title = element_text(size = rel(1.2)),
axis.text = element_text(size = rel(1.2)),
axis.title.y = element_text(angle = 0))+
theme(aspect.ratio=1)+
labs(x = 'score', y = "")+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
geom_vline(xintercept=c(max(decoy_clas$score)),lty=3,col="black",lwd=0.5)
roxygen2::roxygenize()
qunat<-filter_psm <- function(combined_peptide='../test_package/DIA/peptide.tsv',fastafile='../biodata/rRNA.mus_musculus.fa',peptide_quant='../test_package/DIA/msstats.csv',datatype='lbf',label='sp')
ç
qunat<-filter_psm(combined_peptide='../test_package/DIA/peptide.tsv',fastafile='../biodata/rRNA.mus_musculus.fa',peptide_quant='../test_package/DIA/msstats.csv',datatype='lbf',label='sp')
qunat<-filter_psm(combined_peptide='../test_package/DIA/peptide.tsv',fastafile='../biodata/rRNA.mus_musculus.fa',peptide_quant='../test_package/DIA/msstats.csv',datatype='lbf',label='sp')
#' @param datatype tmt or lbf
#' @param label Tags are used to filter known proteins, for Swiss-Prot proteins can use 'sp', It is also possible to use species names e.g. 'HUMAN', 'MOUSE', as long as it is possible to distinguish between classical and non-classical proteins.
#'
#' @return Quantification of peptide intensity after filtration
#' @export
#'
#' @examples
#'
#'
#'
filter_psm <- function(combined_peptide,combined_modified_peptide,fastafile,
peptide_quant,datatype,label) {
require('Biostrings')
require('utils')
if(datatype=='tmt') {
pep<-data.table::fread(combined_peptide)
modpep<-data.table::fread(combined_modified_peptide)
nonadd<-data.frame(Peptide.Sequence=c(pep$`Peptide Sequence`,modpep$`Peptide Sequence`),
Protein=c(pep$Protein,modpep$Protein),
Mapped.Proteins=c(pep$`Mapped Proteins`,modpep$`Mapped Proteins`))
nonadd<-nonadd[!duplicated(nonadd$Peptide.Sequence),]
nonadd<-nonadd[-grep(label,nonadd$Protein),]
list1<-nonadd$Peptide.Sequence[grep(label,nonadd$Mapped.Proteins)]
peplist<-nonadd$Peptide.Sequence
peplist<-unique(peplist)
peplist<-data.frame(seq=c(peplist),
match=c(NA))
pattern2 <- Biostrings::readAAStringSet(fastafile)
for (i in 1:nrow(peplist)){
pattern1 <- Biostrings::AAString(peplist$seq[i])
match<-Biostrings::vcountPattern(pattern1, pattern2, max.mismatch=1)
peplist$match[i]<-sum(match)
}
list2<-peplist$seq[peplist$match>0]
quant<-data.table::fread(peptide_quant,sep = '\t',header = T)
filter<-unique(c(list1,list2))
quant<-quant[!(quant$Peptide %in% filter),]
return(quant)
}
else{
nonadd<-data.table::fread(combined_peptide)
nonadd<-nonadd[-grep(label,nonadd$Protein),]
list1<-nonadd$Peptide[grep(label,nonadd$`Mapped Proteins`)]
nonadd<-nonadd[-grep(label,nonadd$`Mapped Proteins`),]
peplist<-nonadd$Peptide
peplist<-unique(peplist)
peplist<-data.frame(seq=c(peplist),
match=c(NA))
pattern2 <- Biostrings::readAAStringSet(fastafile)
for (i in 1:nrow(peplist)){
pattern1 <- Biostrings::AAString(peplist$seq[i])
match<-Biostrings::vcountPattern(pattern1, pattern2, max.mismatch=1)
peplist$match[i]<-sum(match)
}
list2<-peplist$seq[peplist$match>0]
quant<-data.table::fread(peptide_quant)
filter<-unique(c(list1,list2))
quant<-quant[!(gsub("[^A-Z]", "", quant$PeptideSequence) %in% filter),]
return(quant)
}
}
qunat<-filter_psm(combined_peptide='../test_package/DIA/peptide.tsv',fastafile='../biodata/rRNA.mus_musculus.fa',peptide_quant='../test_package/DIA/msstats.csv',datatype='lbf',label='sp')
View(qunat)
table(qunat$Condition)
qunat<-qunat[qunat$Condition %in% c('Gad2_166','SST_165','VIP_168'),]
quant<-qunat
quant$BioReplicate[is.na(quant$BioReplicate)]<-1
print('Converting quantitative results to MSstatsTMT objects can take a long time depending on the number of peptides and sample size')
processedData <- MSstats::dataProcess(quant, ...)
MSstats::dataProcess(quant)
processedData <- MSstats::dataProcess(quant)
View(processedData)
View(processedData[["FeatureLevelData"]])
View(processedData[["ProteinLevelData"]])
protein<-processedData[["ProteinLevelData"]]
View(protein)
？processedData
?processedData
?dataProcess
colnames(protein)
exparray <- tidyr::spread(protein[,c(2,3,5)], key = GROUP, value = LogIntensities)
View(quant)
str_c(rootDir, "MSstats.csv")
raw <- read_csv('../test_package/DIA/msstats.csv', na = c("", "NA", "0"))
raw <- readr::read_csv('../test_package/DIA/msstats.csv', na = c("", "NA", "0"))
quant$ProteinName <- factor(quant$ProteinName)
quant$PeptideSequence <- factor(quant$PeptideSequence)
processedData <- MSstats::dataProcess(quant[1:6000,], ...)
processedData <- MSstats::dataProcess(quant[1:6000,])
View(processedData)
View(processedData[["ProteinLevelData"]])
colnames(quant)
quant$BioReplicate <- quant %>%
group_by(PeptideSequence, Condition) %>%
mutate(Count = row_number())
library(dplyr)
quant$BioReplicate <- quant %>%
group_by(PeptideSequence, Condition) %>%
mutate(Count = row_number())
demo<-quant[1:6000,]
demo$BioReplicate <- demo %>%
group_by(PeptideSequence, Condition) %>%
mutate(Count = row_number())
View(demo)
demo %>%
arrange(PeptideSequence, Condition) %>%
group_by(PeptideSequence, Condition) %>%
# 使用 row_number() 函数为每个组中的行分配序号
mutate(BioReplicate = row_number()) %>%
ungroup()
View(demo)
counts <- demo %>%
group_by(PeptideSequence, Condition) %>%
mutate(Count = row_number()) %>%
ungroup()
View(counts)
demo <- demo %>%
group_by(PeptideSequence, Condition) %>%
mutate(BioReplicate = row_number()) %>%
ungroup()
View(demo)
processedData <- MSstats::dataProcess(quant[1:6000,])
View(processedData)
View(processedData[["ProteinLevelData"]])
# # Profile plot
dataProcessPlots(data=processedData, type="ProfilePlot")
# # Profile plot
library('MSstats')
dataProcessPlots(data=processedData, type="ProfilePlot")
protein<-processedData[["ProteinLevelData"]]
exparray <- tidyr::spread(protein[,c(2,3,5)], key = GROUP, value = LogIntensities)
rm(list= ls())
load('../test_package/DIA/exp.RData')
array<-protein.groups
pro<-array
name<-'sPep_3401'
species<-'mouse'
library(clusterProfiler)
library(ggplot2)
if (species=='human'){organism='hsa'
library(org.Hs.eg.db)
Org = org.Hs.eg.db
} else {organism='mmu'
library(org.Mm.eg.db)
Org = org.Mm.eg.db
}
pro<-array
cor<-pro[grep(name,rownames(pro)),]
cor
exp<-as.data.frame(pro)
cor<-as.data.frame(cor)
View(cor)
View(exp)
exp<-exp[-grep('rev',rownames(exp)),]
?grep
pro<-array
cor<-pro[grep(name,rownames(pro)),]
pro<-array
array
pro<-array
cor<-pro[grep(name,rownames(pro)),]
exp<-as.data.frame(pro)
cor<-as.data.frame(cor)
exp<-exp[grep('rev',rownames(exp),invert=T),]
corresult<-cor(t(exp),t(cor),use = "p")
corresult<-cor(exp,cor,use = "p")
?cor
corresult<-cor(t(exp),t(cor),use = "p")
t(exp)
corresult<-cor(exp,cor,use = "p")
exp[is.na(exp)]<-0
View(exp)
corresult<-cor(t(exp),t(cor),use = "p")
corresult<-cor(exp,cor,use = "p")
exp
cor
corresult<-cor(t(exp),cor,use = "p")
View(corresult)
corresult<-as.data.frame(corresult)
corresult$what<-c('whatever')
colnames(corresult)[1]<-c('sel')
corresult<-corresult[order(corresult$sel,decreasing = T),]
corresult<-corresult[-1,]
idmatch <-clusterProfiler::bitr(rownames(corresult), fromType = "UNIPROT",
toType = c( "ENTREZID"),
OrgDb = Org)
idmatch<-idmatch[match(rownames(corresult),idmatch$UNIPROT),]
corresult$ID<-idmatch$ENTREZID
corresult<-corresult[!is.na(corresult$ID),]
enrich<-as.numeric(corresult$sel)
names(enrich) <- as.character(corresult$ID)
edo2 <- clusterProfiler::gseGO(enrich,OrgDb= Org,ont='ALL',pvalueCutoff = 0.5,eps=0)
View(array)
View(edo2)
View(edo2@result)
p<-list()
p[[1]]<-
GseaVis::gseaNb(object = edo2,
geneSetID = edo2@result$ID[edo2@result$ONTOLOGY=='BP'][1:5],
subPlot = 2,
termWidth = 35,
# legend.position = c(0.8,0.8),
addPval = T,curveCol=c("#76BA99", "#EB4747", "#996699","#08519C", "#A50F15"),
pvalX = 0.05,pvalY = 0.05)
p[[2]]<-
GseaVis::gseaNb(object = edo2,
geneSetID = edo2@result$ID[edo2@result$ONTOLOGY=='MF'][1:5],
subPlot = 2,
termWidth = 35,
# legend.position = c(0.8,0.8),
addPval = T,curveCol=c("#76BA99", "#EB4747", "#996699","#08519C", "#A50F15"),
pvalX = 0.05,pvalY = 0.05)
p[[3]]<-
GseaVis::gseaNb(object = edo2,
geneSetID = edo2@result$ID[edo2@result$ONTOLOGY=='CC'][1:5],
subPlot = 2,
termWidth = 35,
# legend.position = c(0.8,0.8),
addPval = T,curveCol=c("#76BA99", "#EB4747", "#996699","#08519C", "#A50F15"),
pvalX = 0.05,pvalY = 0.05)
p[[3]]
p[[2]]
p[[1]]
roxygen2::roxygenize()
rm(list= ls())
library(TNSMD)
peptide<-'../test_package/DIA/peptide.tsv'
fasta<-'../biodata/uniprot_mouse.fasta'
report<-'../test_package/DIA/report.tsv'
label<-'sPep'
nonadd<-data.table::fread(peptide)
View(nonadd)
nonadd<-nonadd[-grep(label,nonadd$Protein),]
View(nonadd)
label<-'sp'
nonadd<-data.table::fread(peptide)
nonadd<-nonadd[-grep(label,nonadd$Protein),]
View(nonadd)
list1<-nonadd$Peptide[grep(label,nonadd$`Mapped Proteins`)]
nonadd<-nonadd[-grep(label,nonadd$`Mapped Proteins`),]
peplist<-nonadd$Peptide
peplist<-unique(peplist)
peplist<-data.frame(seq=c(peplist),
match=c(NA))
pattern2 <- Biostrings::readAAStringSet(fastafile)
fastafile<-'../biodata/uniprot_mouse.fasta'
pattern2 <- Biostrings::readAAStringSet(fastafile)
for (i in 1:nrow(peplist)){
pattern1 <- Biostrings::AAString(peplist$seq[i])
match<-Biostrings::vcountPattern(pattern1, pattern2, max.mismatch=1)
peplist$match[i]<-sum(match)
}
View(peplist)
list2<-peplist$seq[peplist$match>0]
quant<-data.table::fread(report)
View(quant)
filter<-unique(c(list1,list2))
quant<-quant[!(quant$Stripped.Sequence %in% filter),]
report
roxygen2::roxygenize()
roxygen2::roxygenize()
protein.groups <- diann_maxlfq(quant[quant$Q.Value <= 0.01 &
quant$PG.Q.Value <= 0.01,], group.header="Protein.Group",
id.header = "Precursor.Id", quantity.header = "Precursor.Normalised")
protein.groups <- diann::diann_maxlfq(quant[quant$Q.Value <= 0.01 &
quant$PG.Q.Value <= 0.01,], group.header="Protein.Group",
id.header = "Precursor.Id", quantity.header = "Precursor.Normalised")
View(protein.groups)
meta<-read.table('../test_package/DIA/file.fp-manifest')
View(meta)
meta<-meta[meta$V3=='DIA',]
View(meta)
exp<-as.data.frame(array(NA,c(nrow(protein.groups),length(unique(meta$V2)))))
View(exp)
length(unique(meta$V2))
colnames(exp)<-unique(meta$V2)
rownames(exp)<-rownames(protein.groups)
i<-1
file<-meta$V1[meta$V2==colnames(exp)[i]]
signs<-exp[,file]
file
signs<-exp[,colnames(protein.groups) %in% file]
View(signs)
signs<-protein.groups[,colnames(protein.groups) %in% file]
signs[is.na(signs)]<-0
rowSums(signs)[1:5]
exp[,i]<-rowSums(signs)
View(exp)
for (i in 1:ncol(exp)){
file<-meta$V1[meta$V2==colnames(exp)[i]]
signs<-protein.groups[,colnames(protein.groups) %in% file]
signs[is.na(signs)]<-0
exp[,i]<-rowSums(signs)
}
i
file<-meta$V1[meta$V2==colnames(exp)[i]]
signs<-protein.groups[,colnames(protein.groups) %in% file]
file
exp[,i]<-rowSums(file)
exp[,i]<-file
file<-meta$V1[meta$V2==colnames(exp)[i]]
signs<-protein.groups[,colnames(protein.groups) %in% file]
exp[,i]<-file
exp[,i]<-signs
View(exp)
for (i in 1:ncol(exp)){
file<-meta$V1[meta$V2==colnames(exp)[i]]
signs<-protein.groups[,colnames(protein.groups) %in% file]
signs[is.na(signs)]<-0
if(length(file)>1) {
exp[,i]<-rowSums(signs)
} else{
exp[,i]<-signs
}
}
test<-coexp_gsea(exp,'sPep_3401','mouse')
library(clusterProfiler)
library(ggplot2)
species<-'mouse'
if (species=='human'){organism='hsa'
library(org.Hs.eg.db)
Org = org.Hs.eg.db
} else {organism='mmu'
library(org.Mm.eg.db)
Org = org.Mm.eg.db
}
array<-exp
pro<-array
cor<-pro[grep(name,rownames(pro)),]
name
name<-'sPep_3401'
cor<-pro[grep(name,rownames(pro)),]
View(cor)
exp<-as.data.frame(pro)
View(exp)
cor<-as.data.frame(cor)
exp<-exp[grep('rev',rownames(exp),invert=T),]
corresult<-cor(t(exp),t(cor),use = "p")
View(corresult)
corresult<-as.data.frame(corresult)
corresult$what<-c('whatever')
colnames(corresult)[1]<-c('sel')
corresult<-corresult[order(corresult$sel,decreasing = T),]
corresult<-corresult[-1,]
idmatch <-clusterProfiler::bitr(rownames(corresult), fromType = "UNIPROT",
toType = c( "ENTREZID"),
OrgDb = Org)
idmatch<-idmatch[match(rownames(corresult),idmatch$UNIPROT),]
corresult$ID<-idmatch$ENTREZID
corresult<-corresult[!is.na(corresult$ID),]
enrich<-as.numeric(corresult$sel)
names(enrich) <- as.character(corresult$ID)
edo2 <- clusterProfiler::gseGO(enrich,OrgDb= Org,ont='ALL',pvalueCutoff = 0.5,eps=0)
View(edo2)
View(edo2@result)
GseaVis::gseaNb(object = edo2,
geneSetID = edo2@result$ID[edo2@result$ONTOLOGY=='BP'][1:5],
subPlot = 2,
termWidth = 35,
# legend.position = c(0.8,0.8),
addPval = T,curveCol=c("#76BA99", "#EB4747", "#996699","#08519C", "#A50F15"),
pvalX = 0.05,pvalY = 0.05)
GseaVis::gseaNb(object = edo2,
geneSetID = edo2@result$ID[edo2@result$ONTOLOGY=='MF'][1:5],
subPlot = 2,
termWidth = 35,
# legend.position = c(0.8,0.8),
addPval = T,curveCol=c("#76BA99", "#EB4747", "#996699","#08519C", "#A50F15"),
pvalX = 0.05,pvalY = 0.05)
GseaVis::gseaNb(object = edo2,
geneSetID = edo2@result$ID[edo2@result$ONTOLOGY=='CC'][1:5],
subPlot = 2,
termWidth = 35,
# legend.position = c(0.8,0.8),
addPval = T,curveCol=c("#76BA99", "#EB4747", "#996699","#08519C", "#A50F15"),
pvalX = 0.05,pvalY = 0.05)
test<-coexp_gsea(exp,'sPep_3401','mouse')
#' Co-expression analysis using the GSEA algorithm
#'
#' @param array Protein intensity array
#' @param name Name of peptide analysed
#' @param species Only 'human' or 'mouse' is supported.
#'
#' @return A list consists of [1] a clusterProfiler object, [2] a GSEA diagram
#' @export
#'
#' @examples
coexp_gsea<-function(array,name,species) {
library(clusterProfiler)
library(ggplot2)
if (species=='human'){organism='hsa'
library(org.Hs.eg.db)
Org = org.Hs.eg.db
} else {organism='mmu'
library(org.Mm.eg.db)
Org = org.Mm.eg.db
}
pro<-array
cor<-pro[grep(name,rownames(pro)),]
exp<-as.data.frame(pro)
cor<-as.data.frame(cor)
exp<-exp[grep('rev',rownames(exp),invert=T),]
corresult<-cor(t(exp),t(cor),use = "p")
corresult<-as.data.frame(corresult)
corresult$what<-c('whatever')
colnames(corresult)[1]<-c('sel')
corresult<-corresult[order(corresult$sel,decreasing = T),]
corresult<-corresult[-1,]
idmatch <-clusterProfiler::bitr(rownames(corresult), fromType = "UNIPROT",
toType = c( "ENTREZID"),
OrgDb = Org)
idmatch<-idmatch[match(rownames(corresult),idmatch$UNIPROT),]
corresult$ID<-idmatch$ENTREZID
corresult<-corresult[!is.na(corresult$ID),]
enrich<-as.numeric(corresult$sel)
names(enrich) <- as.character(corresult$ID)
edo2 <- clusterProfiler::gseGO(enrich,OrgDb= Org,ont='ALL',pvalueCutoff = 0.5,eps=0)
p<-list()
p[[1]]<-
GseaVis::gseaNb(object = edo2,
geneSetID = edo2@result$ID[edo2@result$ONTOLOGY=='BP'][1:5],
subPlot = 2,
termWidth = 35,
# legend.position = c(0.8,0.8),
addPval = T,curveCol=c("#76BA99", "#EB4747", "#996699","#08519C", "#A50F15"),
pvalX = 0.05,pvalY = 0.05)
p[[2]]<-
GseaVis::gseaNb(object = edo2,
geneSetID = edo2@result$ID[edo2@result$ONTOLOGY=='MF'][1:5],
subPlot = 2,
termWidth = 35,
# legend.position = c(0.8,0.8),
addPval = T,curveCol=c("#76BA99", "#EB4747", "#996699","#08519C", "#A50F15"),
pvalX = 0.05,pvalY = 0.05)
p[[3]]<-
GseaVis::gseaNb(object = edo2,
geneSetID = edo2@result$ID[edo2@result$ONTOLOGY=='CC'][1:5],
subPlot = 2,
termWidth = 35,
# legend.position = c(0.8,0.8),
addPval = T,curveCol=c("#76BA99", "#EB4747", "#996699","#08519C", "#A50F15"),
pvalX = 0.05,pvalY = 0.05)
list<-list(object=edo2,plot=p)
return(list)
}
test<-coexp_gsea(exp,'sPep_3401','mouse')
meta
roxygen2::roxygenize()
rm(list= ls())
roxygen2::roxygenize()
library(TNSMD)
library(TNSMD)
roxygen2::roxygenize()
usethis::use_package("progress")
roxygen2::roxygenize()
library(TNSMD)
?generate_index
roxygen2::roxygenize()
gc()
usethis::use_package("diann")
?org.Mm.eg.db
roxygen2::roxygenize()
merge<-T
merge
!merge
!merge
roxygen2::roxygenize()
roxygen2::roxygenize()
library(TNSMD)
roxygen2::roxygenize()
library(TNSMD)
?dia_quant
roxygen2::roxygenize()
