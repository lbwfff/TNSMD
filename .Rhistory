library(TNSMD)
?hello
library(TNSMD)
?filter_psm
datatype<-'tmt'
datatype=='tmt'
combined_peptide<-c('../test_package/LBF/combined_peptide.tsv')
nonadd<-utils::read.table(combined_peptide,sep = '\t',header = T)
View(nonadd)
nonadd<-nonadd[-grep('HUMAN',nonadd$Protein),]
nonadd<-nonadd[-grep('sp',nonadd$Protein),]
View(nonadd)
list1<-nonadd$Peptide.Sequence[-grep('HUMAN',nonadd$Mapped.Proteins)]
peplist<-nonadd$Peptide.Sequence
peplist<-unique(peplist)
peplist<-data.frame(seq=c(peplist),
match=c(NA))
pattern2 <- Biostrings::readAAStringSet(fastafile)
for (i in 1:nrow(peplist)){
pattern1 <- Biostrings::AAString(peplist$seq[i])
match<-Biostrings::vcountPattern(pattern1, pattern2, max.mismatch=1)
peplist$match[i]<-sum(match)
}
list2<-peplist$seq[peplist$match>0]
View(peplist)
peptide_quant<-c('../test_package/LBF/MSstats.csv')
quant<-utils::read.table(peptide_quant,sep = '\t',header = T)
View(quant)
quant<-utils::read.table(peptide_quant,sep = ',',header = T)
View(quant)
filter<-unique(c(list1,list2))
(gsub("[^A-Za-z]", "", quant$PeptideSequence)【1:5
(gsub("[^A-Za-z]", "", quant$PeptideSequence)[1:5]
)
gsub("[^A-Za-z]", "", quant$PeptideSequence)[1:20]
quant<-quant[!(gsub("[^A-Za-z]", "", quant$PeptideSequence) %in% filter),]
View(quant)
quant<-quant[!(gsub("[^A-Z]", "", quant$PeptideSequence) %in% filter),]
View(quant)
filter
library(TNSMD)
peptide_quant
View(nonadd)
nonadd<-utils::read.table(combined_peptide,sep = '\t',header = T)
nonadd<-nonadd[-grep('HUMAN',nonadd$Protein),]
nonadd<-nonadd[-grep('sp',nonadd$Protein),]
View(nonadd)
list1<-nonadd$Peptide.Sequence[-grep('HUMAN',nonadd$Mapped.Proteins)]
peplist<-nonadd$Peptide.Sequence
peplist<-unique(peplist)
peplist<-data.frame(seq=c(peplist),
match=c(NA))
pattern2 <- Biostrings::readAAStringSet(fastafile)
for (i in 1:nrow(peplist)){
pattern1 <- Biostrings::AAString(peplist$seq[i])
match<-Biostrings::vcountPattern(pattern1, pattern2, max.mismatch=1)
peplist$match[i]<-sum(match)
}
list2<-peplist$seq[peplist$match>0]
quant<-utils::read.table(peptide_quant,sep = ',',header = T)
filter<-unique(c(list1,list2))
View(quant)
quant<-quant[!duplicated(gsub("[^A-Z]", "", quant$PeptideSequence)),]
View(quant)
quant<-quant[grep('sPep',quant$ProteinName)]
quant<-quant[grep('sPep',quant$ProteinName),]
View(quant)
nonadd<-utils::read.table(combined_peptide,sep = '\t',header = T)
nonadd<-nonadd[-grep('HUMAN',nonadd$Protein),]
nonadd<-nonadd[-grep('sp',nonadd$Protein),]
View(peplist)
nonadd<-utils::read.table(combined_peptide,sep = '\t',header = T)
View(nonadd)
length(unique(nonadd$Peptide.Sequence))
quant<-utils::read.table(peptide_quant,sep = ',',header = T)
length(unique(gsub("[^A-Z]", "", quant$PeptideSequence)))
quant<-quant[quant$Intensity>0,]
length(unique(gsub("[^A-Z]", "", quant$PeptideSequence)))
quant<-quant[quant$Intensity>0 & !is.na(quant$Intensity),]
View(quant)
length(unique(gsub("[^A-Z]", "", quant$PeptideSequence)))
unique(gsub("[^A-Z]", "", quant$PeptideSequence))[1:5]
annotate_files<-c('../biodata/gencode.v44.annotation.gff3')
ref <- as.data.frame(magrittr::import.gff(annotate_files,format = 'gff'))
ref <- as.data.frame(rtracklayer::import.gff(annotate_files,format = 'gff'))
assemble_transcriptome<-c('../new_trans_homo/1fpkm.annotated.gtf')
tra <- as.data.frame(rtracklayer::import.gff(assemble_transcriptome,format = 'gff'))
View(tra)
tra<-tra[tra$strand!='*',]
View(tra)
tra<-tra[!(tra$transcript_id %in% tra$transcript_id[tra$class_code=='=']),]
View(tra)
new<-tra[1:10000,]
View(new)
length(unique(tra$transcript_id))
#随机抽一万个作为demo
new<-new[new$transcript_id%in% c(unique(new$transcript_id)[sample(length(unique(new$transcript_id)), size = 10000)])]
length(unique(new$transcript_id))
new <- as.data.frame(rtracklayer::import.gff(assemble_transcriptome,format = 'gff'))
new<-new[new$strand!='*',]
new<-new[!(new$transcript_id %in% new$transcript_id[new$class_code=='=']),]
#随机抽一万个作为demo
new<-new[new$transcript_id%in% c(unique(new$transcript_id)[sample(length(unique(new$transcript_id)), size = 10000)])]
#随机抽一万个作为demo
new<-new[new$transcript_id%in% c(unique(new$transcript_id)[sample(length(unique(new$transcript_id)), size = 10000)]),]
View(new)
cache<-as.data.frame(array(NA,c(1,9)))
library(progress)
pb <- progress_bar$new(total = length(unique(new$transcript_id)))
i<-unique(new$transcript_id)[1]
inf<-new[new$transcript_id==i,]
View(inf)
!is.na(inf$ref_gene_id[1])
anno<-as.data.frame(array(NA,c(nrow(inf),9)))
anno$V1<-c(inf$seqnames[1])
anno$V2<-c('STRINGTIE')
anno$V3<-c(as.character(inf$type))
anno$V4<-c(inf$start)
anno$V5<-c(inf$end)
anno$V6<-c('.')
anno$V7<-c(inf$strand[1])
anno$V8<-c('.')
transv9=c(paste0('gene_id "',inf$ref_gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$ref_genetype[1],'";',
'gene_name "',inf$gene_name[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";'))
exonv9=c(paste0('gene_id "',inf$ref_gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$ref_genetype[1],'";',
'gene_name "',inf$gene_name[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";',
'exon_number "',inf$exon_number,'";',
'exon_id "',paste0(inf$transcript_id,'_',inf$exon_numbe),'";'))
exonv9<-exonv9[-1]
anno$V9<-c(transv9,exonv9)
View(anno)
inf$ref_genetype
#如果没有就需要手动创造基因
anno<-as.data.frame(array(NA,c(nrow(inf)+1,9)))
anno$V1<-c(inf$seqnames[1])
anno$V2<-c('STRINGTIE')
anno$V3<-c('gene',as.character(inf$type))
anno$V4<-c(inf$start[1],inf$start)
anno$V5<-c(inf$end[1],inf$end)
anno$V6<-c('.')
anno$V7<-c(inf$strand[1])
anno$V8<-c('.')
genev9=c(paste0('gene_id "',inf$gene_id[1],'";',
'gene_type "',inf$class_code[1],'";',
'gene_name "',inf$gene_id[1],'";'))
transv9=c(paste0('gene_id "',inf$gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$class_code[1],'";',
'gene_name "',inf$gene_id[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";'))
exonv9=c(paste0('gene_id "',inf$gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$class_code[1],'";',
'gene_name "',inf$gene_id[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";',
'exon_number "',inf$exon_number,'";',
'exon_id "',paste0(inf$transcript_id,'_',inf$exon_numbe),'";'))
exonv9<-exonv9[-1]
anno$V9<-c(genev9,transv9,exonv9)
View(anno)
library(progress)
pb <- progress_bar$new(total = length(unique(new$transcript_id)))
for (i in unique(new$transcript_id)){
pb$tick()
inf<-new[new$transcript_id==i,]
if(!is.na(inf$ref_gene_id[1])) {
anno<-as.data.frame(array(NA,c(nrow(inf),9)))
anno$V1<-c(inf$seqnames[1])
anno$V2<-c('STRINGTIE')
anno$V3<-c(as.character(inf$type))
anno$V4<-c(inf$start)
anno$V5<-c(inf$end)
anno$V6<-c('.')
anno$V7<-c(inf$strand[1])
anno$V8<-c('.')
transv9=c(paste0('gene_id "',inf$ref_gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$ref_genetype[1],'";',
'gene_name "',inf$gene_name[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";'))
exonv9=c(paste0('gene_id "',inf$ref_gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$ref_genetype[1],'";',
'gene_name "',inf$gene_name[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";',
'exon_number "',inf$exon_number,'";',
'exon_id "',paste0(inf$transcript_id,'_',inf$exon_numbe),'";'))
exonv9<-exonv9[-1]
anno$V9<-c(transv9,exonv9)
} else{
#如果没有就需要手动创造基因
anno<-as.data.frame(array(NA,c(nrow(inf)+1,9)))
anno$V1<-c(inf$seqnames[1])
anno$V2<-c('STRINGTIE')
anno$V3<-c('gene',as.character(inf$type))
anno$V4<-c(inf$start[1],inf$start)
anno$V5<-c(inf$end[1],inf$end)
anno$V6<-c('.')
anno$V7<-c(inf$strand[1])
anno$V8<-c('.')
genev9=c(paste0('gene_id "',inf$gene_id[1],'";',
'gene_type "',inf$class_code[1],'";',
'gene_name "',inf$gene_id[1],'";'))
transv9=c(paste0('gene_id "',inf$gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$class_code[1],'";',
'gene_name "',inf$gene_id[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";'))
exonv9=c(paste0('gene_id "',inf$gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$class_code[1],'";',
'gene_name "',inf$gene_id[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";',
'exon_number "',inf$exon_number,'";',
'exon_id "',paste0(inf$transcript_id,'_',inf$exon_numbe),'";'))
exonv9<-exonv9[-1]
anno$V9<-c(genev9,transv9,exonv9)
}
cache<-rbind(cache,anno)
}
View(cache)
cache<-cache[-1,]
f <-function(x) unlist(strsplit(x['V9'],';'))[1]
cache$gene <-apply(cache,1,f)
View(cache)
inf<-new[new$transcript_id==i,]
View(inf)
new<-new[!(new$transcript_id %in% new$transcript_id[new$class_code %in% c('=','s')]),]
table(new$class_code)
test<-new[new$type=='transcript',]
View(test)
table(test$class_code,is.na(test$ref_gene_id))
i<-unique(cache$gene)[1]
inf<-cache[cache$gene==i,]
View(inf)
cache$V3=='gene'
inf$V3=='gene'
table(inf$V3=='gene')
table(inf$V3)['gene']
table(inf$V3)['gene'].1
table(inf$V3)['gene']>1
i<-'gene_id "MSTRG.90"'
inf<-cache[cache$gene==i,]
table(inf$V3)['gene']>1
View(inf)
gene<-inf[1,]
View(gene)
inf<-inf[inf$V3!='gene',]
View(inf)
cache<-cache[-1,]
cache<-as.data.frame(array(NA,c(1,9)))
print('Start adjusting the annotation file, if there are a large number of assembled transcripts this may take more time')
library(progress)
pb <- progress_bar$new(total = length(unique(new$transcript_id)))
for (i in unique(new$transcript_id)){
pb$tick()
inf<-new[new$transcript_id==i,]
if(!is.na(inf$ref_gene_id[1])) {
anno<-as.data.frame(array(NA,c(nrow(inf),9)))
anno$V1<-c(inf$seqnames[1])
anno$V2<-c('STRINGTIE')
anno$V3<-c(as.character(inf$type))
anno$V4<-c(inf$start)
anno$V5<-c(inf$end)
anno$V6<-c('.')
anno$V7<-c(inf$strand[1])
anno$V8<-c('.')
transv9=c(paste0('gene_id "',inf$ref_gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$ref_genetype[1],'";',
'gene_name "',inf$gene_name[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";'))
exonv9=c(paste0('gene_id "',inf$ref_gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$ref_genetype[1],'";',
'gene_name "',inf$gene_name[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";',
'exon_number "',inf$exon_number,'";',
'exon_id "',paste0(inf$transcript_id,'_',inf$exon_numbe),'";'))
exonv9<-exonv9[-1]
anno$V9<-c(transv9,exonv9)
} else{
anno<-as.data.frame(array(NA,c(nrow(inf)+1,9)))
anno$V1<-c(inf$seqnames[1])
anno$V2<-c('STRINGTIE')
anno$V3<-c('gene',as.character(inf$type))
anno$V4<-c(inf$start[1],inf$start)
anno$V5<-c(inf$end[1],inf$end)
anno$V6<-c('.')
anno$V7<-c(inf$strand[1])
anno$V8<-c('.')
genev9=c(paste0('gene_id "',inf$gene_id[1],'";',
'gene_type "',inf$class_code[1],'";',
'gene_name "',inf$gene_id[1],'";'))
transv9=c(paste0('gene_id "',inf$gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$class_code[1],'";',
'gene_name "',inf$gene_id[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";'))
exonv9=c(paste0('gene_id "',inf$gene_id[1],'";',
'transcript_id "',inf$transcript_id[1],'";',
'gene_type "',inf$class_code[1],'";',
'gene_name "',inf$gene_id[1],'";',
'transcript_type "',inf$class_code[1],'";',
'transcript_name "',inf$transcript_id[1],'";',
'exon_number "',inf$exon_number,'";',
'exon_id "',paste0(inf$transcript_id,'_',inf$exon_numbe),'";'))
exonv9<-exonv9[-1]
anno$V9<-c(genev9,transv9,exonv9)
}
cache<-rbind(cache,anno)
}
cache<-cache[-1,]
f <-function(x) unlist(strsplit(x['V9'],';'))[1]
cache$gene <-apply(cache,1,f)
cache2<-cache[1,]
for (i in unique(cache$gene)){
inf<-cache[cache$gene==i,]
if(table(inf$V3)['gene']>1) {
gene<-inf[1,]
inf<-inf[inf$V3!='gene',]
gene$V4<-min(inf$V4)
gene$V5<-max(inf$V5)
adj<-rbind(gene,inf)
cache2<-rbind(cache2,adj)
} else{
cache2<-rbind(cache2,inf)
}
}
i
View(cache2)
inf<-cache[cache$gene==i,]
View(inf)
View(inf)
sum(inf$V3 == 'gene')
cache2<-cache[1,]
for (i in unique(cache$gene)){
inf<-cache[cache$gene==i,]
if(sum(inf$V3 == 'gene')>1) {
gene<-inf[1,]
inf<-inf[inf$V3!='gene',]
gene$V4<-min(inf$V4)
gene$V5<-max(inf$V5)
adj<-rbind(gene,inf)
cache2<-rbind(cache2,adj)
} else{
cache2<-rbind(cache2,inf)
}
}
annotate_files
roxygenize()
library(roxygen2)
roxygenize()
?generate_annotations
annotate_files
assemble_transcriptome
roxygenize()
?generate_annotations
roxygenize()
roxygenize()
file<-'../test_package/ribo/ribocode_liver_ribo.txt'
ribocode<-read.table(file,sep = '\t',header = T)
View(ribocode)
ribocode<-ribocode[!duplicated(ribocode$ORF_ID),]
View(ribocode)
ribocode<-ribocode[ribocode$ORF_type!='annotated',]
View(ribocode)
length<-100
View(ribocode)
ribo<-read.table(file,sep = '\t',header = T)
ribo<-ribo[!duplicated(ribo$ORF_ID),]
ribo<-ribo[ribo$ORF_type!='annotated',]
View(ribo)
length<-0
if(length==0)
length==0
length==0
14*3
length<-100
ribo<-ribo[ribo$ORF_length/3 >= length,]
View(ribo)
ribo<-read.table(file,sep = '\t',header = T)
ribo<-ribo[!duplicated(ribo$ORF_ID),]
ribo<-ribo[ribo$ORF_type!='annotated',]
ribo<-ribo[ribo$ORF_length/3 <= length,]
View(ribo)
label<-c('sPep')
table(ribo$ORF_type)
#构建肽索引了，重点是fasta的head
orftype<-ifelse(ribo$ORF_type=='dORF','dORF',ifelse(
ribo$ORF_type=='internal','internal ORF',ifelse(
ribo$ORF_type=='novel','novel ORF',ifelse(
ribo$ORF_type=='Overlap_dORF','Overlap_dORF',ifelse(
ribo$ORF_type=='Overlap_uORF','Overlap_uORF', 'uORF')))))
ribo$name<-paste0(label,'|',label,'_',1:nrow(ribo),'|',label,'_',1:nrow(ribo),
' ',ribo$gene_name,' ',orftype)
View(ribo)
add_numbers <- function(vec) {
result <- character(length(vec))
counts <- list()
for (i in seq_along(vec)) {
element <- vec[i]
if (element %in% names(counts)) {
counts[[element]] <- counts[[element]] + 1
} else {
counts[[element]] <- 1
}
result[i] <- paste(element, counts[[element]], sep = " ")
}
return(result)
}
add_numbers(ribo$name[1:10])
ribo$name1<-paste0(label,'|',label,'_',1:nrow(ribo),'|',label,'_',1:nrow(ribo),
' ')
ribo$name2<-paste0(ribo$gene_name,' ',orftype)
add_numbers(ribo$name2[1:10])
ribo$name2<-add_numbers(ribo$name2)
ribo$name1<-paste0(label,'|',label,'_',1:nrow(ribo),'|',label,'_',1:nrow(ribo))
ribo$name2<-paste0(ribo$gene_name,' ',orftype)
ribo$name2<-add_numbers(ribo$name2)
if (missing(OrganismName)) {
ribo$name3<-paste0('OS=','Homo sapiens',' OX=','9606',' GN=',ribo$gene_name,' PE=6')
} else{
ribo$name3<-paste0('OS=',OrganismName,' OX=',OrganismIdentifier,' GN=',ribo$gene_name,' PE=6')
}
OrganismName
ribo$name3<-paste0('OS=','Homo sapiens',' OX=','9606',' GN=',ribo$gene_name,' PE=6')
index<-data.frame(name=c(paste0(ribo$name1," ",ribo$name2," ",ribo$name3)),
sequence=c(ribo$AAseq))
View(index)
roxygenize()
roxygenize()
#' @param source ribocode, ribotish or other
#' @param length Peptide length, used to filter long proteins in the index, set to 0 when there is no need to filter by length
#' @param OrganismName OrganismName is the scientific name of the organism for the UniProtKB entry, defaulting to "Homo sapiens".
#' @param OrganismIdentifier OrganismIdentifier is the unique identifier of the source organism, assigned by NCBI, defaulting to "9696".
#'
#' @return A Biostrings object can be written as a fasta file
#' @export
#'
#' @examples
#'
generate_index<- function(file,source,length,label,
OrganismName,OrganismIdentifier) {
add_numbers <- function(vec) {
result <- character(length(vec))
counts <- list()
for (i in seq_along(vec)) {
element <- vec[i]
if (element %in% names(counts)) {
counts[[element]] <- counts[[element]] + 1
} else {
counts[[element]] <- 1
}
result[i] <- paste(element, counts[[element]], sep = " ")
}
return(result)
}
if(source=='ribocode'){
ribo<-read.table(file,sep = '\t',header = T)
ribo<-ribo[!duplicated(ribo$ORF_ID),]
ribo<-ribo[ribo$ORF_type!='annotated',]
if(length==0) {
ribo<-ribo
} else{
ribo<-ribo[ribo$ORF_length/3 <= length,]
}
#构建肽索引了，重点是fasta的head
orftype<-ifelse(ribo$ORF_type=='dORF','dORF',ifelse(
ribo$ORF_type=='internal','internal ORF',ifelse(
ribo$ORF_type=='novel','novel ORF',ifelse(
ribo$ORF_type=='Overlap_dORF','Overlap_dORF',ifelse(
ribo$ORF_type=='Overlap_uORF','Overlap_uORF', 'uORF')))))
ribo$name1<-paste0(label,'|',label,'_',1:nrow(ribo),'|',label,'_',1:nrow(ribo))
ribo$name2<-paste0(ribo$gene_name,' ',orftype)
ribo$name2<-add_numbers(ribo$name2)
if (missing(OrganismName)) {
ribo$name3<-paste0('OS=','Homo sapiens',' OX=','9606',' GN=',ribo$gene_name,' PE=6')
} else{
ribo$name3<-paste0('OS=',OrganismName,' OX=',OrganismIdentifier,' GN=',ribo$gene_name,' PE=6')
}
index<-data.frame(name=c(paste0(ribo$name1," ",ribo$name2," ",ribo$name3)),
sequence=c(ribo$AAseq))
}
if(source=='ribotish'){
}
if(source=='other'){
}
}
file
source
roxygenize()
generate_index
?generate_index
??generate_index
